/* Autogenerated file. Do not edit manually. */

import { DojoProvider } from "@dojoengine/core";
import { AccountInterface, shortString } from "starknet";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

interface CheckHandProps {
  account: AccountInterface;
  gameId: number;
  cards: number[];
}

interface CreateGameProps {
  account: AccountInterface;
  username: string;
}

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const contract_name = "game_system";

    const createGame = async ({ account, username }: CreateGameProps) => {
      console.log("creting username", shortString.encodeShortString(username));
      try {
        return await provider.execute(account, contract_name, "create_game", [
          shortString.encodeShortString(username),
        ]);
      } catch (error) {
        console.error("Error executing createGame:", error);
        throw error;
      }
    };

    const checkHand = async ({ account, gameId, cards }: CheckHandProps) => {
      try {
        const cardArray = [gameId, cards.length, ...cards];
        console.log(cardArray);
        return await provider.execute(
          account,
          contract_name,
          "check_hand",
          cardArray
        );
      } catch (error) {
        console.error("Error executing checkHand:", error);
        throw error;
      }
    };

    const discard = async ({
      account,
      gameId,
      cards,
    }: {
      account: AccountInterface;
      gameId: number;
      cards: number[];
    }) => {
      try {
        const cardArray = [gameId, cards.length, ...cards];
        console.log(cardArray);
        return await provider.execute(
          account,
          contract_name,
          "discard",
          cardArray
        );
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };

    const play = async ({
      account,
      gameId,
      cards,
    }: {
      account: AccountInterface;
      gameId: number;
      cards: number[];
    }) => {
      try {
        const cardArray = [gameId, cards.length, ...cards];
        console.log(cardArray);
        return await provider.execute(
          account,
          contract_name,
          "play",
          cardArray
        );
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };

    return { checkHand, createGame, discard, play };
  }
  return {
    actions: actions(),
  };
}
