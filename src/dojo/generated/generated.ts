/* Autogenerated file. Do not edit manually. */

import { DojoProvider } from "@dojoengine/core";
import { AccountInterface, shortString } from "starknet";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

interface HandActionProps extends BaseProps {
  cards: number[];
  modifiers1: number[];
  modifiers2: number[];
}

interface CreateGameProps {
  account: AccountInterface;
  username: string;
}

interface BaseProps {
  account: AccountInterface;
  gameId: number;
}
const game_contract = "game_system";
const shop_contract = "shop_system";

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const createGame = async ({ account, username }: CreateGameProps) => {
      try {
        return await provider.execute(account, {
          contractName: game_contract,
          entrypoint: "create_game",
          calldata: [shortString.encodeShortString(username)],
        });
      } catch (error) {
        console.error("Error executing createGame:", error);
        throw error;
      }
    };

    const checkHand = async ({
      account,
      gameId,
      cards,
      modifiers1,
      modifiers2,
    }: HandActionProps) => {
      try {
        const calldata = [
          gameId,
          cards.length,
          ...cards,
          modifiers1.length,
          ...modifiers1,
          modifiers2.length,
          ...modifiers2,
        ];
        return await provider.execute(account, {
          contractName: game_contract,
          entrypoint: "check_hand",
          calldata,
        });
      } catch (error) {
        console.error("Error executing checkHand:", error);
        throw error;
      }
    };

    const discard = async ({
      account,
      gameId,
      cards,
      modifiers1,
      modifiers2,
    }: HandActionProps) => {
      try {
        const calldata = [
          gameId,
          cards.length,
          ...cards,
          modifiers1.length,
          ...modifiers1,
          modifiers2.length,
          ...modifiers2,
        ];
        return await provider.execute(account, {
          contractName: game_contract,
          entrypoint: "discard",
          calldata,
        });
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };

    const discardEffectCard = async ({
      account,
      gameId,
      card,
    }: {
      account: AccountInterface;
      gameId: number;
      card: number;
    }) => {
      try {
        const calldata = [gameId, card];
        return await provider.execute(account, {
          contractName: game_contract,
          entrypoint: "discard_effect_card",
          calldata,
        });
      } catch (error) {
        console.error("Error executing discardEffectCard:", error);
        throw error;
      }
    };

    const skipShop = async ({
      account,
      gameId,
    }: BaseProps) => {
      try {
        return await provider.execute(account, {
          contractName: shop_contract,
          entrypoint: "skip_shop",
          calldata: [gameId],
        });
      } catch (error) {
        console.error("Error executing skip_shop:", error);
        throw error;
      }
    };

    const buyCard = async ({
      account,
      gameId,
      card_idx,
      card_type,
    }: {
      account: AccountInterface;
      gameId: number;
      card_idx: number;
      card_type: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: shop_contract,
          entrypoint: "buy_card_item",
          calldata: [gameId, card_idx, card_type],
        });
      } catch (error) {
        console.error("Error executing buy_card_item:", error);
        throw error;
      }
    };

    const levelUpPokerHand = async ({
      account,
      gameId,
      item_id,
    }: {
      account: AccountInterface;
      gameId: number;
      item_id: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: shop_contract,
          entrypoint: "buy_poker_hand_item",
          calldata: [gameId, item_id],
        });
      } catch (error) {
        console.error("Error executing buy_poker_hand_item:", error);
        throw error;
      }
    };

    const play = async ({
      account,
      gameId,
      cards,
      modifiers1,
      modifiers2,
    }: HandActionProps) => {
      try {
        const calldata = [
          gameId,
          cards.length,
          ...cards,
          modifiers1.length,
          ...modifiers1,
          modifiers2.length,
          ...modifiers2,
        ];
        return await provider.execute(account, {
          contractName: game_contract,
          entrypoint: "play",
          calldata,
        });
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };

    const storeReroll = async ({
      account,
      gameId,
    }: BaseProps) => {
      try {
        const calldata = [
          gameId,
        ];
        return await provider.execute(account, {
          contractName: shop_contract,
          entrypoint: "reroll",
          calldata,
        });
      } catch (error) {
        console.error("Error executing reroll:", error);
        throw error;
      }
    };

    return {
      checkHand,
      createGame,
      discard,
      discardEffectCard,
      play,
      skipShop,
      buyCard,
      levelUpPokerHand,
      storeReroll
    };
  }
  return {
    actions: actions(),
  };
}
