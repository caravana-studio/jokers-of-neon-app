/* Autogenerated file. Do not edit manually. */

import { DojoProvider } from "@dojoengine/core";
import { Account, AccountInterface } from "starknet";
import { Card } from "../../types/Card";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface CheckHandProps {
  account: Account | AccountInterface;
  gameId: number;
  cards: Card[];
}

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const contract_name = "game_system";

    const createGame = async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          "create_game",
          []
        );
      } catch (error) {
        console.error("Error executing createGame:", error);
        throw error;
      }
    };

    const checkHand = async ({
      account,
      gameId,
      cards,
    }: {
      account: AccountInterface;
      gameId: number;
      cards: number[];
    }) => {
      try {
        const cardArray = [gameId,cards.length,  ...cards]
        console.log(cardArray);
        return await provider.execute(
          account,
          contract_name,
          "check_hand",
          cardArray
        );
      } catch (error) {
        console.error("Error executing checkHand:", error);
        throw error;
      }
    };
    
    const discard = async ({
      account,
      gameId,
      cards,
    }: {
      account: AccountInterface;
      gameId: number;
      cards: number[];
    }) => {
      try {
        const cardArray = [gameId,cards.length,  ...cards]
        console.log(cardArray);
        return await provider.execute(
          account,
          contract_name,
          "discard",
          cardArray
        );
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };
    
    const play = async ({
      account,
      gameId,
      cards,
    }: {
      account: AccountInterface;
      gameId: number;
      cards: number[];
    }) => {
      try {
        const cardArray = [gameId,cards.length,  ...cards]
        console.log(cardArray);
        return await provider.execute(
          account,
          contract_name,
          "play",
          cardArray
        );
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };

    return { checkHand, createGame, discard, play };
  }
  return {
    actions: actions(),
  };
}
