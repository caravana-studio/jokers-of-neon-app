
// Generated by dojo-bindgen on Thu, 26 Sep 2024 12:59:42 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";
import { Account } from "starknet";
export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `jokers_of_neon-config_system` contract
    function config_system() {
        const contract_name = "config_system";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

        return {
            world
        };
    }

    // System definitions for `jokers_of_neon-game_system` contract
    function game_system() {
        const contract_name = "game_system";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

    
        // Call the `create_game` system with the specified Account and calldata
        const create_game = async (props: { account: Account, player_name: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_game",
                        calldata: [props.player_name],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing create_game:", error);
                throw error;
            }
        };
            

    
        // Call the `play` system with the specified Account and calldata
        const play = async (props: { account: Account, game_id: number, cards_index: number[], modifiers_1_index: number[], modifiers_2_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "play",
                        calldata: [props.game_id,
                            props.cards_index.length,
                            ...props.cards_index,
                            props.modifiers_1_index.length,
                            ...props.modifiers_1_index,
                            props.modifiers_2_index.length,
                            ...props.modifiers_2_index],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing play:", error);
                throw error;
            }
        };
            

    
        // Call the `discard` system with the specified Account and calldata
        const discard = async (props: { account: Account, game_id: number, cards_index: number[], modifiers_1_index: number[], modifiers_2_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "discard",
                        calldata: [props.game_id,
                                props.cards_index.length,
                                ...props.cards_index,
                                props.modifiers_1_index.length,
                                ...props.modifiers_1_index,
                                props.modifiers_2_index.length,
                                ...props.modifiers_2_index],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing discard:", error);
                throw error;
            }
        };
            

    
        // Call the `check_hand` system with the specified Account and calldata
        const check_hand = async (props: { account: Account, game_id: number, cards_index: number[], modifiers_1_index: number[], modifiers_2_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "check_hand",
                        calldata: [props.game_id,
                            props.cards_index.length,
                            ...props.cards_index,
                            props.modifiers_1_index.length,
                            ...props.modifiers_1_index,
                            props.modifiers_2_index.length,
                            ...props.modifiers_2_index],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing check_hand:", error);
                throw error;
            }
        };
            

    
        // Call the `discard_effect_card` system with the specified Account and calldata
        const discard_effect_card = async (props: { account: Account, game_id: number, card_index: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "discard_effect_card",
                        calldata: [props.game_id,
                props.card_index],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing discard_effect_card:", error);
                throw error;
            }
        };
            

    
        // Call the `discard_special_card` system with the specified Account and calldata
        const discard_special_card = async (props: { account: Account, game_id: number, special_card_index: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "discard_special_card",
                        calldata: [props.game_id,
                props.special_card_index],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing discard_special_card:", error);
                throw error;
            }
        };
            

        return {
            world, create_game, play, discard, check_hand, discard_effect_card, discard_special_card
        };
    }

    // System definitions for `jokers_of_neon-rage_system` contract
    function rage_system() {
        const contract_name = "rage_system";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

    
        // Call the `calculate` system with the specified Account and calldata
        const calculate = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "calculate",
                        calldata: [props.game_id],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing calculate:", error);
                throw error;
            }
        };
            

        return {
            world, calculate
        };
    }

    // System definitions for `jokers_of_neon-shop_system` contract
    function shop_system() {
        const contract_name = "shop_system";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing world:", error);
                throw error;
            }
        };
            

    
        // Call the `skip_shop` system with the specified Account and calldata
        const skip_shop = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "skip_shop",
                        calldata: [props.game_id],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing skip_shop:", error);
                throw error;
            }
        };
            

    
        // Call the `buy_card_item` system with the specified Account and calldata
        const buy_card_item = async (props: { account: Account, game_id: number, item_id: number, card_item_type: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "buy_card_item",
                        calldata: [props.game_id,
                                    props.item_id,
                                    props.card_item_type]
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing buy_card_item:", error);
                throw error;
            }
        };
            

    
        // Call the `buy_poker_hand_item` system with the specified Account and calldata
        const buy_poker_hand_item = async (props: { account: Account, game_id: number, item_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "buy_poker_hand_item",
                        calldata: [props.game_id,
                props.item_id],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing buy_poker_hand_item:", error);
                throw error;
            }
        };
            

    
        // Call the `buy_blister_pack_item` system with the specified Account and calldata
        const buy_blister_pack_item = async (props: { account: Account, game_id: number, blister_pack_item_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "buy_blister_pack_item",
                        calldata: [props.game_id,
                props.blister_pack_item_id],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing buy_blister_pack_item:", error);
                throw error;
            }
        };
            

    
        // Call the `select_cards_from_blister` system with the specified Account and calldata
        const select_cards_from_blister = async (props: { account: Account, game_id: number, cards_index: number[] }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "select_cards_from_blister",
                        calldata: [props.game_id,
                ...props.cards_index],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing select_cards_from_blister:", error);
                throw error;
            }
        };
            

    
        // Call the `reroll` system with the specified Account and calldata
        const reroll = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "reroll",
                        calldata: [props.game_id],
                    },
                    "jokers_of_neon"
                );
            } catch (error) {
                console.error("Error executing reroll:", error);
                throw error;
            }
        };
            

        return {
            world, skip_shop, buy_card_item, buy_poker_hand_item, buy_blister_pack_item, select_cards_from_blister, reroll
        };
    }

    return {
        config_system: config_system(),
        game_system: game_system(),
        rage_system: rage_system(),
        shop_system: shop_system()
    };
}
