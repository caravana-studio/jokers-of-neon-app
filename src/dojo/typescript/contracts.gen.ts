// Generated by dojo-bindgen on Thu, 19 Sep 2024 14:37:31 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript`
import { DojoProvider } from "@dojoengine/core";
import { Account, AccountInterface } from "starknet";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;
interface HandActionProps extends BaseProps {
  cards: number[];
  modifiers1: number[];
}

interface BaseProps {
  account: AccountInterface;
  gameId: number;
}

const DEFAULT_NAMESPACE = "jokers_of_neon";
export async function setupWorld(provider: DojoProvider) {
  // System definitions for `jokers_of_neon-config_system` contract
  function config_system() {
    const contract_name = "config_system";

    // Call the `world` system with the specified Account and calldata
    const world = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: "world",
            calldata: [],
          },
          "jokers_of_neon"
        );
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    return {
      world,
    };
  }

  // System definitions for `jokers_of_neon-game_system` contract
  function game_system() {
    const contract_name = "game_system";

    // Call the `create_game` system with the specified Account and calldata
    const createGame = async (props: {
      account: Account;
      player_name: bigint;
    }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: "create_game",
            calldata: [props.player_name],
          },
          "jokers_of_neon"
        );
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    // Call the `play` system with the specified Account and calldata
    const play = async ({
      account,
      gameId,
      cards,
      modifiers1
    }: HandActionProps) => {
      try {
        const calldata = [
          gameId,
          cards.length,
          ...cards,
          modifiers1.length,
          ...modifiers1
        ];
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "play",
            calldata,
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };

    // Call the `discard` system with the specified Account and calldata
    const discard = async ({
      account,
      gameId,
      cards,
      modifiers1
    }: HandActionProps) => {
      try {
        const calldata = [
          gameId,
          cards.length,
          ...cards,
          modifiers1.length,
          ...modifiers1
        ];
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "discard",
            calldata,
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing discard:", error);
        throw error;
      }
    };

    // Call the `check_hand` system with the specified Account and calldata
    const checkHand = async ({
      account,
      gameId,
      cards,
      modifiers1,
    }: HandActionProps) => {
      try {
        const calldata = [
          gameId,
          cards.length,
          ...cards,
          modifiers1.length,
          ...modifiers1
        ];
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "check_hand",
            calldata,
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing checkHand:", error);
        throw error;
      }
    };

    // Call the `discard_effect_card` system with the specified Account and calldata
    const discardEffectCard = async ({
      account,
      gameId,
      card,
    }: {
      account: AccountInterface;
      gameId: number;
      card: number;
    }) => {
      try {
        const calldata = [gameId, card];
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "discard_effect_card",
            calldata,
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing discardEffectCard:", error);
        throw error;
      }
    };

    // Call the `discard_special_card` system with the specified Account and calldata
    const discardSpecialCard = async ({
      account,
      gameId,
      card,
    }: {
      account: AccountInterface;
      gameId: number;
      card: number;
    }) => {
      try {
        const calldata = [gameId, card];
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "discard_special_card",
            calldata,
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing discardSpecialCard:", error);
        throw error;
      }
    };

    // Call the `world` system with the specified Account and calldata
    const world = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: "world",
            calldata: [],
          },
          "jokers_of_neon"
        );
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    return {
      world,
      createGame,
      play,
      discard,
      checkHand,
      discardEffectCard,
      discardSpecialCard,
    };
  }

    // System definitions for `jokers_of_neon-poker_hand_system` contract
    function poker_hand_system() {
      const contract_name = "poker_hand_system";
  
      // Call the `get_player_poker_hands` system with the specified Account and calldata
      const getPlayerPokerHands = async ({ gameId }: { gameId: number }) => {
          try {
              const calldata = [gameId];
              return await provider.call(
                DEFAULT_NAMESPACE,
                  {
                      contractName: contract_name,
                      entrypoint: "get_player_poker_hands",
                      calldata
                  },
              );
          } catch (error) {
              console.error("Error executing get_player_poker_hands:", error);
              throw error;
          }
      };
          
      // Call the `world` system with the specified Account and calldata
      const world = async (props: { account: Account }) => {
        try {
          return await provider.execute(
            props.account,
            {
              contractName: contract_name,
              entrypoint: "world",
              calldata: [],
            },
            "jokers_of_neon"
          );
        } catch (error) {
          console.error("Error executing spawn:", error);
          throw error;
        }
      };

      return {
        getPlayerPokerHands,
        world,
      };
  }

  
  // System definitions for `jokers_of_neon-rage_system` contract
  function rage_system() {
    const contract_name = "rage_system";

    // Call the `calculate` system with the specified Account and calldata
    const calculate = async (props: { account: Account; game_id: number }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: "calculate",
            calldata: [props.game_id],
          },
          "jokers_of_neon"
        );
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    // Call the `world` system with the specified Account and calldata
    const world = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: "world",
            calldata: [],
          },
          "jokers_of_neon"
        );
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    return {
      calculate,
      world,
    };
  }

  // System definitions for `jokers_of_neon-shop_system` contract
  function shop_system() {
    const contract_name = "shop_system";

    // Call the `skip_shop` system with the specified Account and calldata
    const skipShop = async ({ account, gameId }: BaseProps) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "skip_shop",
            calldata: [gameId],
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing skip_shop:", error);
        throw error;
      }
    };

    // Call the `buy_card_item` system with the specified Account and calldata
    const buyCard = async ({
      account,
      gameId,
      card_idx,
      card_type,
    }: {
      account: AccountInterface;
      gameId: number;
      card_idx: number;
      card_type: number;
    }) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "buy_card_item",
            calldata: [gameId, card_idx, card_type],
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing buy_card_item:", error);
        throw error;
      }
    };


    // Call the `buy_slot_special_card_item` system with the specified Account and calldata
    const buySpecialSlot = async ({
      account,
      gameId,
    }: {
      account: AccountInterface;
      gameId: number;
    }) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "buy_slot_special_card_item",
            calldata: [gameId],
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing buy_slot_special_card_item:", error);
        throw error;
      }
    };

    // Call the `buy_poker_hand_item` system with the specified Account and calldata
    const levelUpPokerHand = async ({
      account,
      gameId,
      item_id,
    }: {
      account: AccountInterface;
      gameId: number;
      item_id: number;
    }) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "buy_poker_hand_item",
            calldata: [gameId, item_id],
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing buy_poker_hand_item:", error);
        throw error;
      }
    };

    // Call the `buy_blister_pack_item` system with the specified Account and calldata
    const buyPack = async ({
      account,
      gameId,
      pack_id,
    }: {
      account: AccountInterface;
      gameId: number;
      pack_id: number;
    }) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "buy_blister_pack_item",
            calldata: [gameId, pack_id],
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing buy_pack_item:", error);
        throw error;
      }
    };

    // Call the `select_cards_from_blister` system with the specified Account and calldata
    const selectCardsFromPack = async ({
      account,
      gameId,
      cardIndexes,
    }: {
      account: AccountInterface;
      gameId: number;
      cardIndexes: number[];
    }) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "select_cards_from_blister",
            calldata: [gameId, cardIndexes.length, ...cardIndexes],
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing select_cards_from_pack:", error);
        throw error;
      }
    };

    // Call the `reroll` system with the specified Account and calldata
    const storeReroll = async ({ account, gameId }: BaseProps) => {
      try {
        const calldata = [gameId];
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "reroll",
            calldata,
          },
          DEFAULT_NAMESPACE
        );
      } catch (error) {
        console.error("Error executing reroll:", error);
        throw error;
      }
    };

    // Call the `world` system with the specified Account and calldata
    const world = async (props: { account: Account }) => {
      try {
        return await provider.execute(
          props.account,
          {
            contractName: contract_name,
            entrypoint: "world",
            calldata: [],
          },
          "jokers_of_neon"
        );
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    return {
      world,
      skipShop,
      buyCard,
      levelUpPokerHand,
      buyPack,
      selectCardsFromPack,
      storeReroll,
      buySpecialSlot
    };
  }

  return {
    config_system: config_system(),
    game_system: game_system(),
    rage_system: rage_system(),
    poker_hand_system: poker_hand_system(),
    shop_system: shop_system(),
  };
}
