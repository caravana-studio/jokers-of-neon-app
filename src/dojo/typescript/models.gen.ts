// Generated by dojo-bindgen on Fri, 25 Oct 2024 16:04:21 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript`
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<
  ReturnType<typeof defineContractComponents>
>;

export interface LevelPokerHand {
  poker_hand: PokerHand;
  level: Number;
  multi: Number;
  points: Number;
}

// Type definition for `dojo::model::layout::Layout` enum
export type Layout =
  | { type: "Fixed"; value: RecsType.NumberArray }
  | { type: "Struct"; value: RecsType.StringArray }
  | { type: "Tuple"; value: RecsType.StringArray }
  | { type: "Array"; value: RecsType.StringArray }
  | { type: "ByteArray" }
  | { type: "Enum"; value: RecsType.StringArray };

export const LayoutDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `jokers_of_neon::models::status::shop::shop::BlisterPackItem` struct
export interface BlisterPackItem {
  game_id: Number;
  idx: Number;
  blister_pack_id: Number;
  cost: Number;
  purchased: Boolean;
}
export const BlisterPackItemDefinition = {
  game_id: RecsType.Number,
  idx: RecsType.Number,
  blister_pack_id: RecsType.Number,
  cost: RecsType.Number,
  purchased: RecsType.Boolean,
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
  data: String[];
  pending_word: BigInt;
  pending_word_len: Number;
}
export const ByteArrayDefinition = {
  data: RecsType.StringArray,
  pending_word: RecsType.BigInt,
  pending_word_len: RecsType.Number,
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
  selector: BigInt;
  layout: Layout;
}
export const FieldLayoutDefinition = {
  selector: RecsType.BigInt,
  layout: LayoutDefinition,
};

// Type definition for `jokers_of_neon::models::status::shop::shop::BlisterPackResult` struct
export interface BlisterPackResult {
  game_id: Number;
  cards_picked: Boolean;
  cards: Number[];
}
export const BlisterPackResultDefinition = {
  game_id: RecsType.Number,
  cards_picked: RecsType.Boolean,
  cards: RecsType.NumberArray,
};

// Type definition for `jokers_of_neon::models::data::events::BuyBlisterPackEvent` struct
export interface BuyBlisterPackEvent {
  game_id: Number;
  level: Number;
  idx: Number;
  blister_pack_id: Number;
}
export const BuyBlisterPackEventDefinition = {
  game_id: RecsType.Number,
  level: RecsType.Number,
  idx: RecsType.Number,
  blister_pack_id: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::shop::shop::CardItemType` enum
export type CardItemType =
  | { type: "None" }
  | { type: "Common" }
  | { type: "Modifier" }
  | { type: "Special" };

export const CardItemTypeDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `jokers_of_neon::models::data::events::BuyCardEvent` struct
export interface BuyCardEvent {
  game_id: Number;
  level: Number;
  idx: Number;
  item_type: CardItemType;
  card_id: Number;
  temporary: Boolean;
}
export const BuyCardEventDefinition = {
  game_id: RecsType.Number,
  level: RecsType.Number,
  idx: RecsType.Number,
  item_type: CardItemTypeDefinition,
  card_id: RecsType.Number,
  temporary: RecsType.Boolean,
};

// Type definition for `jokers_of_neon::models::data::poker_hand::PokerHand` enum
export type PokerHand =
  | { type: "None" }
  | { type: "RoyalFlush" }
  | { type: "StraightFlush" }
  | { type: "FiveOfAKind" }
  | { type: "FourOfAKind" }
  | { type: "FullHouse" }
  | { type: "Straight" }
  | { type: "Flush" }
  | { type: "ThreeOfAKind" }
  | { type: "TwoPair" }
  | { type: "OnePair" }
  | { type: "HighCard" };

export const PokerHandDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `jokers_of_neon::models::data::events::BuyPokerHandEvent` struct
export interface BuyPokerHandEvent {
  game_id: Number;
  level: Number;
  idx: Number;
  poker_hand: PokerHand;
  level_hand: Number;
}
export const BuyPokerHandEventDefinition = {
  game_id: RecsType.Number,
  level: RecsType.Number,
  idx: RecsType.Number,
  poker_hand: PokerHandDefinition,
  level_hand: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::BuyRerollEvent` struct
export interface BuyRerollEvent {
  game_id: Number;
  level: Number;
  reroll_cost: Number;
  reroll_executed: Boolean;
}
export const BuyRerollEventDefinition = {
  game_id: RecsType.Number,
  level: RecsType.Number,
  reroll_cost: RecsType.Number,
  reroll_executed: RecsType.Boolean,
};

// Type definition for `jokers_of_neon::models::status::shop::shop::CardItem` struct
export interface CardItem {
  game_id: Number;
  idx: Number;
  item_type: CardItemType;
  card_id: Number;
  cost: Number;
  purchased: Boolean;
  temporary: Boolean;
}
export const CardItemDefinition = {
  game_id: RecsType.Number,
  idx: RecsType.Number,
  item_type: CardItemTypeDefinition,
  card_id: RecsType.Number,
  cost: RecsType.Number,
  purchased: RecsType.Boolean,
  temporary: RecsType.Boolean,
};

// Type definition for `jokers_of_neon::models::data::events::CardScoreEvent` struct
export interface CardScoreEvent {
  player: BigInt;
  index: Number;
  multi: Number;
  points: Number;
}
export const CardScoreEventDefinition = {
  player: RecsType.BigInt,
  index: RecsType.Number,
  multi: RecsType.Number,
  points: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::CreateGameEvent` struct
export interface CreateGameEvent {
  player: BigInt;
  game_id: Number;
}
export const CreateGameEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::round::current_hand_card::CurrentHandCard` struct
export interface CurrentHandCard {
  game_id: Number;
  idx: Number;
  card_id: Number;
}
export const CurrentHandCardDefinition = {
  game_id: RecsType.Number,
  idx: RecsType.Number,
  card_id: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::game::game::CurrentSpecialCards` struct
export interface CurrentSpecialCards {
  game_id: Number;
  idx: Number;
  effect_card_id: Number;
  is_temporary: Boolean;
  remaining: Number;
}
export const CurrentSpecialCardsDefinition = {
  game_id: RecsType.Number,
  idx: RecsType.Number,
  effect_card_id: RecsType.Number,
  is_temporary: RecsType.Boolean,
  remaining: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::game_deck::DeckCard` struct
export interface DeckCard {
  game_id: Number;
  index: Number;
  card_id: Number;
}
export const DeckCardDefinition = {
  game_id: RecsType.Number,
  index: RecsType.Number,
  card_id: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::DetailEarnedEvent` struct
export interface DetailEarnedEvent {
  player: BigInt;
  game_id: Number;
  round_defeat: Number;
  level_bonus: Number;
  hands_left: Number;
  hands_left_cash: Number;
  discard_left: Number;
  discard_left_cash: Number;
  rage_card_defeated: Number;
  rage_card_defeated_cash: Number;
  total: Number;
}
export const DetailEarnedEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  round_defeat: RecsType.Number,
  level_bonus: RecsType.Number,
  hands_left: RecsType.Number,
  hands_left_cash: RecsType.Number,
  discard_left: RecsType.Number,
  discard_left_cash: RecsType.Number,
  rage_card_defeated: RecsType.Number,
  rage_card_defeated_cash: RecsType.Number,
  total: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::game::game::GameState` enum
export type GameState =
  | { type: "IN_GAME" }
  | { type: "AT_SHOP" }
  | { type: "FINISHED" }
  | { type: "OPEN_BLISTER_PACK" };

export const GameStateDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `jokers_of_neon::models::status::game::game::Game` struct
export interface Game {
  id: Number;
  owner: BigInt;
  player_name: BigInt;
  max_hands: Number;
  max_discard: Number;
  max_jokers: Number;
  round: Number;
  player_score: Number;
  level: Number;
  len_hand: Number;
  len_max_current_special_cards: Number;
  len_current_special_cards: Number;
  current_jokers: Number;
  state: GameState;
  cash: Number;
}
export const GameDefinition = {
  id: RecsType.Number,
  owner: RecsType.BigInt,
  player_name: RecsType.BigInt,
  max_hands: RecsType.Number,
  max_discard: RecsType.Number,
  max_jokers: RecsType.Number,
  round: RecsType.Number,
  player_score: RecsType.Number,
  level: RecsType.Number,
  len_hand: RecsType.Number,
  len_max_current_special_cards: RecsType.Number,
  len_current_special_cards: RecsType.Number,
  current_jokers: RecsType.Number,
  state: GameStateDefinition,
  cash: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::game_deck::GameDeck` struct
export interface GameDeck {
  game_id: Number;
  len: Number;
  round_len: Number;
}
export const GameDeckDefinition = {
  game_id: RecsType.Number,
  len: RecsType.Number,
  round_len: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::card::Suit` enum
export type Suit =
  | { type: "None" }
  | { type: "Clubs" }
  | { type: "Diamonds" }
  | { type: "Hearts" }
  | { type: "Spades" }
  | { type: "Joker" };

export const SuitDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `jokers_of_neon::models::data::events::ModifierCardSuitEvent` struct
export interface ModifierCardSuitEvent {
  player: BigInt;
  game_id: Number;
  modifier_card_idx: Number;
  current_hand_card_idx: Number;
  suit: Suit;
}
export const ModifierCardSuitEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  modifier_card_idx: RecsType.Number,
  current_hand_card_idx: RecsType.Number,
  suit: SuitDefinition,
};

// Type definition for `jokers_of_neon::models::data::events::NeonPokerHandEvent` struct
export interface NeonPokerHandEvent {
  player: BigInt;
  game_id: Number;
  neon_cards_idx: Number[];
  multi: Number;
  points: Number;
}
export const NeonPokerHandEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  neon_cards_idx: RecsType.NumberArray,
  multi: RecsType.Number,
  points: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::PlayGameOverEvent` struct
export interface PlayGameOverEvent {
  player: BigInt;
  game_id: Number;
}
export const PlayGameOverEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::PlayPokerHandEvent` struct
export interface PlayPokerHandEvent {
  game_id: Number;
  level: Number;
  count_hand: Number;
  poker_hand: PokerHand;
}
export const PlayPokerHandEventDefinition = {
  game_id: RecsType.Number,
  level: RecsType.Number,
  count_hand: RecsType.Number,
  poker_hand: PokerHandDefinition,
};

// Type definition for `jokers_of_neon::models::data::events::PlayWinGameEvent` struct
export interface PlayWinGameEvent {
  player: BigInt;
  game_id: Number;
  level: Number;
  player_score: Number;
}
export const PlayWinGameEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  level: RecsType.Number,
  player_score: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::game::player::PlayerLevelPokerHand` struct
export interface PlayerLevelPokerHand {
  game_id: Number;
  poker_hand: PokerHand;
  level: Number;
}
export const PlayerLevelPokerHandDefinition = {
  game_id: RecsType.Number,
  poker_hand: PokerHandDefinition,
  level: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::PokerHandEvent` struct
export interface PokerHandEvent {
  player: BigInt;
  poker_hand: Number;
  multi: Number;
  points: Number;
}
export const PokerHandEventDefinition = {
  player: RecsType.BigInt,
  poker_hand: RecsType.Number,
  multi: RecsType.Number,
  points: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::shop::shop::PokerHandItem` struct
export interface PokerHandItem {
  game_id: Number;
  idx: Number;
  poker_hand: PokerHand;
  level: Number;
  cost: Number;
  purchased: Boolean;
}
export const PokerHandItemDefinition = {
  game_id: RecsType.Number,
  idx: RecsType.Number,
  poker_hand: PokerHandDefinition,
  level: RecsType.Number,
  cost: RecsType.Number,
  purchased: RecsType.Boolean,
};

// Type definition for `jokers_of_neon::models::status::game::rage::RageRound` struct
export interface RageRound {
  game_id: Number;
  is_active: Boolean;
  current_probability: Number;
  active_rage_ids: Number[];
  last_active_level: Number;
}
export const RageRoundDefinition = {
  game_id: RecsType.Number,
  is_active: RecsType.Boolean,
  current_probability: RecsType.Number,
  active_rage_ids: RecsType.NumberArray,
  last_active_level: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::round::round::Round` struct
export interface Round {
  game_id: Number;
  player_score: Number;
  level_score: Number;
  hands: Number;
  discard: Number;
}
export const RoundDefinition = {
  game_id: RecsType.Number,
  player_score: RecsType.Number,
  level_score: RecsType.Number,
  hands: RecsType.Number,
  discard: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::RoundScoreEvent` struct
export interface RoundScoreEvent {
  player: BigInt;
  game_id: Number;
  player_score: Number;
}
export const RoundScoreEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  player_score: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::shop::shop::Shop` struct
export interface Shop {
  game_id: Number;
  reroll_cost: Number;
  reroll_executed: Boolean;
  len_item_common_cards: Number;
  len_item_modifier_cards: Number;
  len_item_special_cards: Number;
  len_item_poker_hands: Number;
  len_item_blister_pack: Number;
}
export const ShopDefinition = {
  game_id: RecsType.Number,
  reroll_cost: RecsType.Number,
  reroll_executed: RecsType.Boolean,
  len_item_common_cards: RecsType.Number,
  len_item_modifier_cards: RecsType.Number,
  len_item_special_cards: RecsType.Number,
  len_item_poker_hands: RecsType.Number,
  len_item_blister_pack: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::status::shop::shop::SlotSpecialCardsItem` struct
export interface SlotSpecialCardsItem {
  game_id: Number;
  cost: Number;
  purchased: Boolean;
}
export const SlotSpecialCardsItemDefinition = {
  game_id: RecsType.Number,
  cost: RecsType.Number,
  purchased: RecsType.Boolean,
};

// Type definition for `jokers_of_neon::models::data::events::SpecialCashEvent` struct
export interface SpecialCashEvent {
  player: BigInt;
  cash: Number;
  card_idx: Number;
  special_idx: Number;
}
export const SpecialCashEventDefinition = {
  player: RecsType.BigInt,
  cash: RecsType.Number,
  card_idx: RecsType.Number,
  special_idx: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::SpecialGlobalEvent` struct
export interface SpecialGlobalEvent {
  player: BigInt;
  game_id: Number;
  current_special_card_idx: Number;
  multi: Number;
  points: Number;
}
export const SpecialGlobalEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  current_special_card_idx: RecsType.Number,
  multi: RecsType.Number,
  points: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::SpecialModifierMultiEvent` struct
export interface SpecialModifierMultiEvent {
  player: BigInt;
  game_id: Number;
  current_special_card_idx: Number;
  current_hand_card_idx: Number;
  multi: Number;
}
export const SpecialModifierMultiEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  current_special_card_idx: RecsType.Number,
  current_hand_card_idx: RecsType.Number,
  multi: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::SpecialModifierPointsEvent` struct
export interface SpecialModifierPointsEvent {
  player: BigInt;
  game_id: Number;
  current_special_card_idx: Number;
  current_hand_card_idx: Number;
  points: Number;
}
export const SpecialModifierPointsEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  current_special_card_idx: RecsType.Number,
  current_hand_card_idx: RecsType.Number,
  points: RecsType.Number,
};

// Type definition for `jokers_of_neon::models::data::events::SpecialModifierSuitEvent` struct
export interface SpecialModifierSuitEvent {
  player: BigInt;
  game_id: Number;
  current_special_card_idx: Number;
  current_hand_card_idx: Number;
  suit: Suit;
}
export const SpecialModifierSuitEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  current_special_card_idx: RecsType.Number,
  current_hand_card_idx: RecsType.Number,
  suit: SuitDefinition,
};

// Type definition for `jokers_of_neon::models::data::events::SpecialPokerHandEvent` struct
export interface SpecialPokerHandEvent {
  player: BigInt;
  game_id: Number;
  current_special_card_idx: Number;
  multi: Number;
  points: Number;
}
export const SpecialPokerHandEventDefinition = {
  player: RecsType.BigInt,
  game_id: RecsType.Number,
  current_special_card_idx: RecsType.Number,
  multi: RecsType.Number,
  points: RecsType.Number,
};

export function defineContractComponents(world: World) {
  return {
    // Model definition for `jokers_of_neon::models::status::shop::shop::BlisterPackItem` model
    BlisterPackItem: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          idx: RecsType.Number,
          blister_pack_id: RecsType.Number,
          cost: RecsType.Number,
          purchased: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "BlisterPackItem",
            types: ["u32", "u32", "u32", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::shop::shop::BlisterPackResult` model
    BlisterPackResult: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          cards_picked: RecsType.Boolean,
          cards: RecsType.NumberArray,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "BlisterPackResult",
            types: ["u32", "bool", "array"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::BuyBlisterPackEvent` model
    BuyBlisterPackEvent: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          level: RecsType.Number,
          idx: RecsType.Number,
          blister_pack_id: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "BuyBlisterPackEvent",
            types: ["u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::BuyCardEvent` model
    BuyCardEvent: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          level: RecsType.Number,
          idx: RecsType.Number,
          item_type: RecsType.String,
          card_id: RecsType.Number,
          temporary: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "BuyCardEvent",
            types: ["u32", "u32", "u32", "CardItemType", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::BuyPokerHandEvent` model
    BuyPokerHandEvent: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          level: RecsType.Number,
          idx: RecsType.Number,
          poker_hand: RecsType.String,
          level_hand: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "BuyPokerHandEvent",
            types: ["u32", "u32", "u32", "PokerHand", "u8"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::BuyRerollEvent` model
    BuyRerollEvent: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          level: RecsType.Number,
          reroll_cost: RecsType.Number,
          reroll_executed: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "BuyRerollEvent",
            types: ["u32", "u32", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::shop::shop::CardItem` model
    CardItem: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          idx: RecsType.Number,
          item_type: RecsType.String,
          card_id: RecsType.Number,
          cost: RecsType.Number,
          purchased: RecsType.Boolean,
          temporary: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "CardItem",
            types: ["u32", "u32", "CardItemType", "u32", "u32", "bool", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::CardScoreEvent` model
    CardScoreEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          index: RecsType.Number,
          multi: RecsType.Number,
          points: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "CardScoreEvent",
            types: ["ContractAddress", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::CreateGameEvent` model
    CreateGameEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "CreateGameEvent",
            types: ["ContractAddress", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::round::current_hand_card::CurrentHandCard` model
    CurrentHandCard: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          idx: RecsType.Number,
          card_id: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "CurrentHandCard",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::game::game::CurrentSpecialCards` model
    CurrentSpecialCards: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          idx: RecsType.Number,
          effect_card_id: RecsType.Number,
          is_temporary: RecsType.Boolean,
          remaining: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "CurrentSpecialCards",
            types: ["u32", "u32", "u32", "bool", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::game_deck::DeckCard` model
    DeckCard: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          index: RecsType.Number,
          card_id: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "DeckCard",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::DetailEarnedEvent` model
    DetailEarnedEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          round_defeat: RecsType.Number,
          level_bonus: RecsType.Number,
          hands_left: RecsType.Number,
          hands_left_cash: RecsType.Number,
          discard_left: RecsType.Number,
          discard_left_cash: RecsType.Number,
          rage_card_defeated: RecsType.Number,
          rage_card_defeated_cash: RecsType.Number,
          total: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "DetailEarnedEvent",
            types: [
              "ContractAddress",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
            ],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::game::game::Game` model
    Game: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          owner: RecsType.BigInt,
          player_name: RecsType.BigInt,
          max_hands: RecsType.Number,
          max_discard: RecsType.Number,
          max_jokers: RecsType.Number,
          round: RecsType.Number,
          player_score: RecsType.Number,
          level: RecsType.Number,
          len_hand: RecsType.Number,
          len_max_current_special_cards: RecsType.Number,
          len_current_special_cards: RecsType.Number,
          current_jokers: RecsType.Number,
          state: RecsType.String,
          cash: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "Game",
            types: [
              "u32",
              "ContractAddress",
              "felt252",
              "u8",
              "u8",
              "u8",
              "u8",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
              "u8",
              "GameState",
              "u32",
            ],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::game_deck::GameDeck` model
    GameDeck: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          len: RecsType.Number,
          round_len: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "GameDeck",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::ModifierCardSuitEvent` model
    ModifierCardSuitEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          modifier_card_idx: RecsType.Number,
          current_hand_card_idx: RecsType.Number,
          suit: RecsType.String,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "ModifierCardSuitEvent",
            types: ["ContractAddress", "u32", "u32", "u32", "Suit"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::NeonPokerHandEvent` model
    NeonPokerHandEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          neon_cards_idx: RecsType.NumberArray,
          multi: RecsType.Number,
          points: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "NeonPokerHandEvent",
            types: ["ContractAddress", "u32", "array", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::PlayGameOverEvent` model
    PlayGameOverEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "PlayGameOverEvent",
            types: ["ContractAddress", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::PlayPokerHandEvent` model
    PlayPokerHandEvent: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          level: RecsType.Number,
          count_hand: RecsType.Number,
          poker_hand: RecsType.String,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "PlayPokerHandEvent",
            types: ["u32", "u32", "u8", "PokerHand"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::PlayWinGameEvent` model
    PlayWinGameEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          level: RecsType.Number,
          player_score: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "PlayWinGameEvent",
            types: ["ContractAddress", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::game::player::PlayerLevelPokerHand` model
    PlayerLevelPokerHand: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          poker_hand: RecsType.String,
          level: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "PlayerLevelPokerHand",
            types: ["u32", "PokerHand", "u8"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::PokerHandEvent` model
    PokerHandEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          poker_hand: RecsType.Number,
          multi: RecsType.Number,
          points: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "PokerHandEvent",
            types: ["ContractAddress", "u8", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::shop::shop::PokerHandItem` model
    PokerHandItem: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          idx: RecsType.Number,
          poker_hand: RecsType.String,
          level: RecsType.Number,
          cost: RecsType.Number,
          purchased: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "PokerHandItem",
            types: ["u32", "u32", "PokerHand", "u8", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::game::rage::RageRound` model
    RageRound: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          is_active: RecsType.Boolean,
          current_probability: RecsType.Number,
          active_rage_ids: RecsType.NumberArray,
          last_active_level: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "RageRound",
            types: ["u32", "bool", "u16", "array", "u8"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::round::round::Round` model
    Round: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          player_score: RecsType.Number,
          level_score: RecsType.Number,
          hands: RecsType.Number,
          discard: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "Round",
            types: ["u32", "u32", "u32", "u8", "u8"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::RoundScoreEvent` model
    RoundScoreEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          player_score: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "RoundScoreEvent",
            types: ["ContractAddress", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::shop::shop::Shop` model
    Shop: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          reroll_cost: RecsType.Number,
          reroll_executed: RecsType.Boolean,
          len_item_common_cards: RecsType.Number,
          len_item_modifier_cards: RecsType.Number,
          len_item_special_cards: RecsType.Number,
          len_item_poker_hands: RecsType.Number,
          len_item_blister_pack: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "Shop",
            types: ["u32", "u32", "bool", "u32", "u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::status::shop::shop::SlotSpecialCardsItem` model
    SlotSpecialCardsItem: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          cost: RecsType.Number,
          purchased: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "SlotSpecialCardsItem",
            types: ["u32", "u32", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::SpecialCashEvent` model
    SpecialCashEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          cash: RecsType.Number,
          card_idx: RecsType.Number,
          special_idx: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "SpecialCashEvent",
            types: ["ContractAddress", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::SpecialGlobalEvent` model
    SpecialGlobalEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          current_special_card_idx: RecsType.Number,
          multi: RecsType.Number,
          points: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "SpecialGlobalEvent",
            types: ["ContractAddress", "u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::SpecialModifierMultiEvent` model
    SpecialModifierMultiEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          current_special_card_idx: RecsType.Number,
          current_hand_card_idx: RecsType.Number,
          multi: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "SpecialModifierMultiEvent",
            types: ["ContractAddress", "u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::SpecialModifierPointsEvent` model
    SpecialModifierPointsEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          current_special_card_idx: RecsType.Number,
          current_hand_card_idx: RecsType.Number,
          points: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "SpecialModifierPointsEvent",
            types: ["ContractAddress", "u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::SpecialModifierSuitEvent` model
    SpecialModifierSuitEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          current_special_card_idx: RecsType.Number,
          current_hand_card_idx: RecsType.Number,
          suit: RecsType.String,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "SpecialModifierSuitEvent",
            types: ["ContractAddress", "u32", "u32", "u32", "Suit"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `jokers_of_neon::models::data::events::SpecialPokerHandEvent` model
    SpecialPokerHandEvent: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          game_id: RecsType.Number,
          current_special_card_idx: RecsType.Number,
          multi: RecsType.Number,
          points: RecsType.Number,
        },
        {
          metadata: {
            namespace: "jokers_of_neon",
            name: "SpecialPokerHandEvent",
            types: ["ContractAddress", "u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
